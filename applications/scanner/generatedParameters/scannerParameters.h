#ifndef SCANNER_PARAMETERS_H_
#define SCANNER_PARAMETERS_H_
/**
 * \file scannerParameters.h
 * \attention This file is automatically generated and should not be in general modified manually
 *
 * \date MMM DD, 20YY
 * \author autoGenerator
 */

#include "reflection.h"
#include "defaultSetter.h"
#include "printerVisitor.h"

/*
 *  Embed includes.
 */
/*
 *  Additional includes for Composite Types.
 */

using namespace corecvs;

/*
 *  Additional includes for Pointer Types.
 */

namespace corecvs {
}
/*
 *  Additional includes for enum section.
 */

/**
 * \brief Scanner parameters 
 * Scanner parameters 
 **/
class ScannerParameters : public BaseReflection<ScannerParameters>
{
public:
    enum FieldId {
        RED_THRESHOLD_ID,
        HEIGHT_ID,
        SCANNER_PARAMETERS_FIELD_ID_NUM
    };

    /** Section with variables */

    /** 
     * \brief red threshold 
     * red threshold 
     */
    int mRedThreshold;

    /** 
     * \brief height 
     * height 
     */
    double mHeight;

    /** Static fields init function, this is used for "dynamic" field initialization */ 
    static int staticInit();

    /** Section with getters */
    const void *getPtrById(int fieldId) const
    {
        return (const unsigned char *)(this) + fields()[fieldId]->offset;
    }
    int redThreshold() const
    {
        return mRedThreshold;
    }

    double height() const
    {
        return mHeight;
    }

    /* Section with setters */
    void setRedThreshold(int redThreshold)
    {
        mRedThreshold = redThreshold;
    }

    void setHeight(double height)
    {
        mHeight = height;
    }

    /* Section with embedded classes */
    /* visitor pattern - http://en.wikipedia.org/wiki/Visitor_pattern */
template<class VisitorType>
    void accept(VisitorType &visitor)
    {
        visitor.visit(mRedThreshold,              static_cast<const IntField *>     (fields()[RED_THRESHOLD_ID]));
        visitor.visit(mHeight,                    static_cast<const DoubleField *>  (fields()[HEIGHT_ID]));
    }

    ScannerParameters()
    {
        DefaultSetter setter;
        accept(setter);
    }

    ScannerParameters(
          int redThreshold
        , double height
    )
    {
        mRedThreshold = redThreshold;
        mHeight = height;
    }

    friend ostream& operator << (ostream &out, ScannerParameters &toSave)
    {
        PrinterVisitor printer(out);
        toSave.accept<PrinterVisitor>(printer);
        return out;
    }

    void print ()
    {
        cout << *this;
    }
};
#endif  //SCANNER_PARAMETERS_H_
