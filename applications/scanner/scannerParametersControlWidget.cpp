/**
 * \file scannerParametersControlWidget.cpp
 * \attention This file is automatically generated and should not be in general modified manually
 *
 * \date MMM DD, 20YY
 * \author autoGenerator
 */

#include "scannerParametersControlWidget.h"
#include "ui_scannerParametersControlWidget.h"
#include "qSettingsGetter.h"
#include "qSettingsSetter.h"


ScannerParametersControlWidget::ScannerParametersControlWidget(QWidget *parent, bool _autoInit, QString _rootPath)
    : ParametersControlWidgetBase(parent)
    , mUi(new Ui::ScannerParametersControlWidget)
    , autoInit(_autoInit)
    , rootPath(_rootPath)
{
    mUi->setupUi(this);

    QObject::connect(mUi->redThresholdSpinBox, SIGNAL(valueChanged(int)), this, SIGNAL(paramsChanged()));
    QObject::connect(mUi->heightSpinBox, SIGNAL(valueChanged(double)), this, SIGNAL(paramsChanged()));
}

ScannerParametersControlWidget::~ScannerParametersControlWidget()
{

    delete mUi;
}

void ScannerParametersControlWidget::loadParamWidget(WidgetLoader &loader)
{
    ScannerParameters *params = createParameters();
    loader.loadParameters(*params, rootPath);
    setParameters(*params);
    delete params;
}

void ScannerParametersControlWidget::saveParamWidget(WidgetSaver  &saver)
{
    ScannerParameters *params = createParameters();
    saver.saveParameters(*params, rootPath);
    delete params;
}

 /* Composite fields are NOT supported so far */
void ScannerParametersControlWidget::getParameters(ScannerParameters& params) const
{

    params.setRedThreshold     (mUi->redThresholdSpinBox->value());
    params.setHeight           (mUi->heightSpinBox->value());

}

ScannerParameters *ScannerParametersControlWidget::createParameters() const
{

    /**
     * We should think of returning parameters by value or saving them in a preallocated place
     **/


    ScannerParameters *result = new ScannerParameters(
          mUi->redThresholdSpinBox->value()
        , mUi->heightSpinBox->value()
    );
    return result;
}

void ScannerParametersControlWidget::setParameters(const ScannerParameters &input)
{
    // Block signals to send them all at once
    bool wasBlocked = blockSignals(true);
    mUi->redThresholdSpinBox->setValue(input.redThreshold());
    mUi->heightSpinBox->setValue(input.height());
    blockSignals(wasBlocked);
    emit paramsChanged();
}

void ScannerParametersControlWidget::setParametersVirtual(void *input)
{
    // Modify widget parameters from outside
    ScannerParameters *inputCasted = static_cast<ScannerParameters *>(input);
    setParameters(*inputCasted);
}
